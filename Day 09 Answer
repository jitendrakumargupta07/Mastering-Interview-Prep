QUESTION: Imagine you're organizing a running event where participants' completion times (in minutes) are recorded. To give recognition to the top performers, you want to find the k-th fastest runner. However, with a large number of participants, you don't want to sort the entire list, just find the specific position you're interested inâ€”say the 3rd or 4th fastest time.

For example:

You have a list of times [7, 10, 4, 3, 20, 15] in minutes, and you want to find the 3rd fastest time. Here, the 3rd fastest time is 7 minutes, indicating the runner who completed the race in 7 minutes stands in 3rd position among the quickest.
In another scenario, the list of times is [2, 3, 1, 20, 15], and you want the 4th fastest time. Here, the 4th fastest time is 15 minutes.
Finding the k-th smallest time without fully sorting the list allows for efficient processing, especially when dealing with a large number of runners. This approach helps you quickly determine rankings or specific positions in a list of unordered data, making it practical for real-time event tracking or leaderboards.


Answer: 

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int partition(vector<int>& times, int low, int high) {
    int pivot = times[high];
    int i = low - 1;
    
    for (int j = low; j < high; j++) {
        if (times[j] <= pivot) {
            i++;
            swap(times[i], times[j]);
        }
    }
    swap(times[i + 1], times[high]);
    return i + 1;
}

int quickSelect(vector<int>& times, int low, int high, int k) {
    if (low <= high) {
        int pi = partition(times, low, high);
        
        if (pi == k) {
            return times[pi];
        }
        else if (pi < k) {
            return quickSelect(times, pi + 1, high, k);
        }
        else {
            return quickSelect(times, low, pi - 1, k);
        }
    }
    return -1;
}

int main() {
    int n, k;
    cin >> n >> k;
    vector<int> times(n);
    
    for (int i = 0; i < n; i++) {
        cin >> times[i];
    }

    int result = quickSelect(times, 0, n - 1, k - 1);
    cout << result << endl;
    
    return 0;
}
